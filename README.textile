h1. Bootstrap your java application

Keystone "project":http://intelligents-ia.com/index.php/category/technique/keystone is a bootstrap that loads your application and its dependencies into a single archive.
With his maven plugin, its use is very easy!

h1. Configure your project


h2. Configure Your POM

bc. 
	<build>
	    <plugins>
	        <plugin>
	            <groupId>org.intelligentsia.keystone</groupId>
	            <artifactId>plugin</artifactId>
	            <version>3.1</version>
	            <executions>
	                <execution>
	                    <id>make-assembly</id>
	                    <phase>package</phase>
	                    <configuration>
	                        <mainClass>your.class.Main</mainClass>
	                    </configuration>
	                    <goals>
	                        <goal>custom</goal>
	                    </goals>
	                </execution>
	            </executions>
	        </plugin>
	    </plugins>
	</build>


h2. Keystone Maven Plugin Parameters

* mainClass: your class 'Main' which implements: public static void main(String[] args)

* cleanUpLib: true | false (default true), clean up folder named “lib”  at startup before extraction of initial archive
* cleanUpBeforeShutdown: true | false (default is false),clean up folder named “lib”  at shutdown

* info: true | false (default is false), level 'INFO' logs generated by the Keystone bootsrap
* verbose: true | false (default is false), level ‘VERBOSE’ logs generated by the Keystone bootsrap
* logFile: Log file path. Per default, all logs go on standard output.

* includeJavaHomeLib: true | false (default is true), Add to classpath application, archives from the JAVA_HOME / lib if it exists
* includeSystemClassLoader: true | false (default is true).Adding the system classloader as a parent application class loaders

* explodeDirectory: Root extracting archives embark with the bootstrap. By default, this directory is the current directory if write operations are allowed on it, otherwise it is a temporary folder that is used.
* finalName: Final artifact name. By default, this is the name of the original artefact suffix "-boot". Example for "sample.jar", it will be "sample-boot.jar"
* replaceProjectArtifact: true | false (default is false). If enabled, the archive packaged artifact replaces the current project

* natives: add a list of native libraries. Each path can be a file or a directory (Not recursive). 

bc. 
<natives>
	<paths>
		<path>${basedir}/extra/timer.dll</path>
		<path>${basedir}/extra/timer.so</path>
		<path>${basedir}/extra-natives</path>
	</paths>
</natives>

* libraries: add a list of extra  java libraries. Each path can be a file or a directory (Not recursive). 

bc. 
<libraries>
	<paths>
		<path>${basedir}/h2-driver.jar</path>
		<path>${basedir}/drivers</path>
	</paths>
</libraries>

p. native library are supported in both way
* with plugin parameters 
* within embedded jar


h2. Add some repositories

h3. Releases Repository

bc. 
	<repositories>
		<repository>
			<id>intelligents-ia-releases</id>
			<name>Intelligents-ia releases repository</name>
			<url>http://mvn.intelligents-ia.com/releases</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>intelligents-ia-releases</id>
			<name>Intelligents-ia releases repository</name>
			<url>http://mvn.intelligents-ia.com/releases</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>




h1. Use extra features: Restart your application when needed!

h2. Add a new dependency on your project

bc. 
<dependency>
	<groupId>org.intelligents-ia.keystone</groupId>
	<artifactId>keystone-boot</artifactId>
	<version>3.1</version>
</dependency>


h2. When you want to restart, simply throw this exception

bc. 
throw new KeystoneException(KeystoneException.Operation.RESTART);


h1. Releases Notes

Next step:
* configure dependencies scope with maven plugin
  

h2. 3.1

* exclude only "test" scope artifacts
* add native support 
** be able to load embedded native library file 
** be able to load native library in classpath at runtime
* add plugin configuration utilities:
** add a path set of native libraries
** add a path set of extra java libraries 

h2. 3.0

Change done:
* Integrate super pom 1.4.4 and add git.properties
* Integrate keystone sample in this project
* use org.intelligents-ia:intelligents-ia as super pom
* extract all keystone-kernel and extras in another project:
** keystone project focus on bootstrap application, maven integration, restart features and pattern to update embedded java application at runtime
** keystone-kernel focus on micro kernel container (yes, i like playing...)

h2. 2.6.0

* Bootstrap: add stack trace when exception occurs
* Use Jackson libraries from github: com.fasterxml.jackson
* Fix header of license
* Add copy constructor on Version (keystone api)

















