====
           Licensed to the Apache Software Foundation (ASF) under one
           or more contributor license agreements.  See the NOTICE file
           distributed with this work for additional information
           regarding copyright ownership.  The ASF licenses this file
           to you under the Apache License, Version 2.0 (the
           "License"); you may not use this file except in compliance
           with the License.  You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

           Unless required by applicable law or agreed to in writing,
           software distributed under the License is distributed on an
           "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
           KIND, either express or implied.  See the License for the
           specific language governing permissions and limitations
           under the License.

====

May step should be:
A/ Obtain a kernel which :
  - can download artefact in a local repository
  - create a default class loader context
  - can add artefact on this class loader (without restart)
  - list all artefact loaded
  - instanciate class, manager proxy and cast ?

B/ Add Artefact loader:
 - build with ArtefactLoaderHandler:
	- LibrairyHandler: load inner librairie META-INF/lib if exist (should using keystone-boot classes)
 	- MainClassHandler: use Main-Class manifest: launch this main class in a dedicated thread.
 - may use a internal event bus based on guava ?
 
C/ Extends Handler:
 - add Spring DM handler
 - add Jetty Handler => webapp loader

D/ work on Kernel Internal Service ?
 - Jndi provider
 - VFS provider
 - Database provider aka h2  
 
E/ Extends capacity:
 - Save configuration of kernel for restart
    
  

- create KernelConfiguration as
  {g:a:v}+ loader as no isolated artifact
  home ?
  [repository definition}*
  

- fix exception managment on kernel service register/unregister

- add a way to limit access on KernelProviderService

- Test with a g:a:v with an entry point, that find a KernelProviderService instance, and then do something

- after, i had to find what to do by default with main runnable process...
	=> maybe the loading of  {g:a:v}+
	=> which predicate of terminaison ?  

